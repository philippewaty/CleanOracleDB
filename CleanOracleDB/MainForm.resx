<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYOFhpKPl93xkBacHoAAAAAAAAAAEaLuQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAGxcmMZw9YohrU4Oq/VyQsvZbhLn4XISh2WKTt2Zck7UaWGFlAAAA
        AABmZpkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAADAoHAAAAHAAAACwAAABtPllzojpcd8BxlK/jh8Ls/2+nz/9flsf+T3yc/1qGuPljlLXlYZCygl+M
        r2tfjLM1XYm0Ck+WhAAAAAAAVVWqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAodKiF7mbXulKvD/6PI4f+TqtT/VYGf/YC54P9VgqT/cK/b/1yUxP9Pe5v+aJ3P/2md
        wv9fj7BVX42vUF6MrkVfjK80X5CxGV+OtQWNDXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACQsPCgMHCjQGCxFWdpiwv4ymt/eZt9r/jLHK/n2v1P5jjL/+VISo/k55mP9vrNb/V4q5/1SC
        o/9vrdv/da/X/0BkhVlejLBAX4yuNl+Mri1ei68kYI+wGFqQqwkgfoUBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAEBPlt0PyAxQsFVcofxkrva/26Vsf94o83/V4mt/Fl+sf9dkbX/VYKl/2CU
        uf9XibX/V4eo/2WdxP9urNn/XoCdcV+OsDFfjK8oXoyvH1+NrhVaia0NX46uBSF0lgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOFZwLVVxhvVvqND/SHCO/2KWxP9un8f/X5K0/lyF
        tv9Yhqr/S3KP/1yQvf9hlbj/V4ep/12Qtf9gh6aNX42vI16Mrhlfia0QW46wCG+n0wH///8AbW22AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAARqqyv+GaVuP9rp9H/THaV/2KJ
        uP9hlbr/V36n/1iHp/9Jb4v/ZZjA/1mKsv9gkrb/S3WU/2KNradmmb4SXYiuDFqMpQR9+P8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUsLCyEZmZmuwAAAB0AAAAAAAAAEQAAAGHLysn/xcfK/1iN
        s/9ekLX/Y5S0/2iUuv9VgZ7/WX6o/1uJqf9LcI7/UX+q/2GStv9JcIz/ZZO2xv///wBXsMABAE3/AIDA
        wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFPz8/oNHR0f/a2tr/hISE2wgICIuRkZHl1tbW/9fX
        1/7W1dT/usDF/1SHrv9biaz/c6DB/1mHqf9Qc5T/VHub/0pviv9Oe6T/YpCx/0htiP9kkrbzAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANzc3AC4uLofNzc3/y8vL/szMzP/T09P/4eHh/9XV
        1f7T09P/1NTU/9TU1P/X1tX/prG9/1GApP9Zhqf/dJ69/2OJo/9WeZv/V3+d/0lynf9bh6b/QWN+/1yA
        nP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADt7e34sfHx/7Hx8f/ysrK/83N
        zf/Pz8//0dHR/9LS0v/T09P/3Nzc/+Df3//l4uH/fJSo/094l/9qk7L/b5i2/2eRsf9Rc4z/V2l5/1dv
        g/9mhJn/YoOc/1lyiTcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlJSUywMDA+r6+
        vv69vb3/wMDA/8XFxf/Izsr/0tnW/9XV1f/MzMz/y8vL/9HR0P/i4N3/SmqD/2GLqv9ojqr/anuH/2yI
        nP9hi6f/Tnmk/2GLq/9WgJ//X4Ogaic+TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABVVVWjx8fH/8TExP/Dw8P/vcbC/6S9sP+1s7T/v7+//8LCwv/Cw8L/ysvK/9fW1v+3v8b/SF5x/3mS
        ov90n7//bpWy/2yTrv9TeqL/ZY2q/1mHrf5ih6ScAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAGaOjo/XGxsb+yMjI/9HR0f/Mzs3/xMTE/8PBwv+TlJT/Wmpl/0llXv9cbGn/lpeX/9nX
        1f92jZ//Y4uo/36lw/9wlK//cJez/2qTtf9chKX/Woer/2GHpNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACAAAAA0ZGRlzzMzM/8bGxv/Jycn/1dXV/8TExP/OzM3/iY6O/xhyWv8XqHb/IbJ0/xuq
        c/8Xel7/fIOB/8nJy/9Repn/f6XA/3mivv9qjKT/gqe//2yStv91nbr/aZGu+AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACeAgIDeiYmJ7Kurq/vJycn+y8vL/9TU1P/Ly8v/ysnK/8fDxP8UdFr/IL6J/yW3
        dv8rtWr/J7Zw/yK8gf8Uf2L/trGw/4+isP9qkqz/jbPM/5q1x/+rx9r/dJm7/3abuP9aeZL8AAAAGAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhUsjIyP/ExMT/x8fH/8rKyv/Ozs7/2tra/8fHx//Pz8//jp2Z/xKv
        gv8iv4X/Jb96/ye/dv8nvnf/I76A/xe8iP90h4L/zcrI/3CLn/+4z+D/wNjn/4Kku/9bhq3/UHWQ/3uK
        lP8AAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAyMjJgzMzM/8fHx//Kysr/zs7O/9HR0f/X19f/ysrK/9TT
        1P91lo3/GMCQ/x3EiP8syoz/Ms2Q/yzKiv8exYb/GsSP/2ORhf/Bvr//x8XC/5Oouf9xmLP/aYym/2x+
        kf92jqD/h6G0/xoWEkkAAAAAAAAAAAAAAAAAAAAAAAAAADIyMlXQ0ND/ycnJ/83Nzf/R0dH/1NTU/9bW
        1v/Ozs7/1NLT/5Kmof8Qu4v/VNSt/2HfuP9i4rr/Yt+4/1bXsP8TwY7/hqCb/8TCwv+5ubn/1NPT/9rX
        1f+Fl6X/bZm5/1R9pf9acob/DggDPQAAAAAAAAAAAAAAAAAAAAAAAAAAGhoaMObm5v/n5+f/5OTk/9TU
        1P7X19f/19fX/8/Pz//T09P/2dTW/ymWef9/28L/iOjN/5Hv1P+L6s//gt/G/yqhgf/Uz9D/y8vL/76+
        vv/Jysr/0tDQ/5qnsv5pgZT/bISU/5Kls/8AAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAA
        ABVdXV2M3t7e/9jY2P/e3t7/zMzM/9PT0//b2dr/sMC7/3i6qf+r5tf/uvLj/67q2/99wa7/qrq1/9rZ
        2f/R0dH/wsjG/8nJyf/Nzc3/3NnZ/3uKlNaAnKz/jKu+/2+AiiMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB/Nzc3/3Nzc/t3d3f/T09P/1NTU/97e3v/h4OH/0tTS/5u5sf+Uu7H/mrmw/8zP
        zv/c2tv/2NjY/9DS0f/O09D/0NDQ/8vLy/61tbX3LDY7L6C8y/94mrL/l7PFigAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH5+frHj4+P/4ODg/+bm5v/R0dH/3Nzc/97e3v/g4OD/4N/f/+Lf
        4f/f3t7/3dzc/9va2//U1tT/xtHN/+Pj4//Y2Nj/19fX/2JiYpgAAAAAq8TR3W+Sqv6Wt83tAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon5+f6eXl5f/k5OT/6+vr/+/v7//V1dX/y8vL/+Li
        4v/h4eH/3t7e/9/e3//f3t//w8vH/8zW0v/p6en/5eXl/9/f3//c3Nz/iIiI3gAAAByuxtR2fqC2/4mv
        y/99lKMyN0FIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYeHh9Pv7+//5+fn/+rq6v/r6+v/7e3t/+7u
        7v/u7u7/0tLS/8/Pz//Nzs3/zNDO/83V0f/r7Oz/7Ovr/+np6f/o6Oj/5ubm/+Hh4f/q6ur/c3JywTI0
        OxCfvs//ZY6r/5Wzy5YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnJycrPX19f/s7Oz/7Ozs/+7u
        7v7x8fH/7+/v/+7u7v/v7+//8PDw//Hx8f/w8PD/7+/v/+/v7//u7u7/7u7u/+zs7P7r6+v/5+fn//Dw
        8P+ZmZmXAAAAAKnE08xjiqT+kLTO+QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFr6+vy/n5
        +f/19fX+3d3d+LCwsLnz8/P/+fn5//Pz8/7x8fH/8fHx//Hx8f/09PT++vr6/+3t7f+xsbG17e3t//Pz
        8/739/f/vb29vQAAAAAAAAAArsPQZoChuP9/qMT/hZ+xQVBfagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAFqqqqstfX1+4PDw8qAAAAAAAAACSQkJCS8PDw//f39//29vb/9/f3/+fn5/+Ojo6EAAAAGwAA
        AABISEg65ubm+b6+vqQAAAAAAAAAAAAAAAAAAAAEpMDS/2OLqf6TtM2mAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAABLV1dX/+/v7//n5+f/7+/v/vr6+8wAA
        AAkAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAACrxNG8apCo/pO30f8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACs/Pz/n5+fn/9/f3//n5
        +f/FxcXqAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzef3AKm+y1WRssT/hKzG/5q2
        yVcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnJycRLW1
        tXK8vLyBs7OzcICAgDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKG7
        yfNzlavLfZSkIQAAAAAAAAAA///9////0P///gB///AA///gAP//wAD//+AAf//gAH/54AB/8AAAf+AA
        AH/gAAB/8AAAf/AAAD/wAAA/8AAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/4AAAP/AAAR/wAAEf8AABn+AA
        AI/gAACP8AABz/nAc8f/4P/H/+D/5//7/+c=
</value>
  </data>
</root>